class Graph {
  constructor() {
    this.nodes = 0;
    this.adjacencyList = {};
  }

  addNode(vertex) {
    if (!this.adjacencyList[vertex]) {
      this.adjacencyList[vertex] = new Set();
      this.nodes++;
    }
  }

  addEdge(vertex1, vertex2) {
    if (!this.adjacencyList[vertex1] ) {
      this.addNode(vertex1);
    }
    if (!this.adjacencyList[vertex2] ) {
      this.addNode(vertex2);
    }
    this.adjacencyList[vertex1].add(vertex2);
    this.adjacencyList[vertex2].add(vertex1);
  }

  hasEdge(vertex1, vertex2) {
    if (!this.adjacencyList[vertex1] || !this.adjacencyList[vertex2] ) {
      return false;
    }
    return this.adjacencyList[vertex1].has(vertex2);
  }

  removeVertex(vertex) {
    if ( this.adjacencyList[vertex] ) {
      this.adjacencyList[vertex].forEach((connection) => {
        this.adjacencyList[connection].delete(vertex);
      });
      delete this.adjacencyList[vertex];
      this.nodes--;
    }
  }

  removeEdge(vertex1, vertex2) {
    this.adjacencyList[vertex1].delete(vertex2);
    this.adjacencyList[vertex2].delete(vertex1);
  }

  bfs(startVertex) {
    const queue = [];
    const visited = new Array(Object.keys(this.adjacencyList).length+1).fill(0);
    visited[startVertex] = 1;
    queue.push(startVertex)
    while(queue.length > 0) {
      // Dequeue
      const dequeuedVertex = queue.shift();
      console.log("->", dequeuedVertex);
      this.adjacencyList[dequeuedVertex].forEach((connection) => {
        if (!visited[connection]) {
          queue.push(connection);
          visited[connection] = 1;
        }
      })
    }
  }
  
}

const graph = new Graph();
const paths = {
  1: [2,6],
  2: [1,3,4],
  6: [1,7,9],
  3: [2],
  4: [2,5],
  7: [6,8],
  9: [6],
  5: [4,8],
  8: [5,7]
}
Object.keys(paths).forEach((key) => graph.addNode(key));
Object.keys(paths).forEach((key) => {
  paths[key].forEach((value) => {
    graph.addEdge(+key, +value)
  })
})
// graph.removeVertex("A")
console.log(graph)
graph.bfs(6)
